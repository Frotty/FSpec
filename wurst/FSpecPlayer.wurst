package FSpecPlayer
import FSpecConfig
import Colors
import MapBounds

FSpecPlayer array players

int typId = 0

public class FSpecPlayer
	int gold 			= 0
	int lumber 			= 0
	int supplyMax 		= 0
	int supplyCurrent 	= 0
	
	int peonSupply = 0
	int soldierSupply = 0
	int currentTier = 1
	
	int boardId = -1
	
	player p
	
	string name
	int id
	Race currentRace
	
	construct(player p, Race r)
		this.p = p
		currentRace = r
		id = p.getId()
		print("test1")
		name = fromPlayer(p).toColorString() + p.getName() + "|r"
		print("test2 " + name)
		players[p.getId()] = this
		typId = peon_ids[currentRace castTo int]
		GroupEnumUnitsInRect(ENUM_GROUP, mapRect, Filter(function filter))
		var count = 0
		for u in ENUM_GROUP
			count++
		ENUM_GROUP.clear()
		peonSupply = count
		soldierSupply = p.getMaxSupply()-peonSupply

	function update()
		
	function onDeath(int id)
		if id == peon_ids[currentRace castTo int]
			peonSupply--
			
	function onTrain(int id)
		if id == peon_ids[currentRace castTo int]
			peonSupply++
		
	static function onDeathEvent()
		players[GetTriggerUnit().getOwner().getId()].onDeath(GetTriggerUnit().getTypeId())
		
	static function onTrainEvent()
		players[GetTriggerUnit().getOwner().getId()].onTrain(GetTriggerUnit().getTypeId())
		
function filter() returns boolean
	return GetFilterUnit().getTypeId() == typId

init
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)..addAction(function FSpecPlayer.onDeathEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_TRAIN_FINISH)..addAction(function FSpecPlayer.onTrainEvent)
