package FSpecPlayer
import FSpecConfig
import Colors
import MapBounds
import initlater FSpecBoard
FSpecPlayer array players

int typId = 0
player owner

public class FSpecPlayer
	FSpecBoard board
	int startRow
	int startCol
	int gold 			= 0
	int lumber 			= 0
	int supplyMax 		= 0
	int supplyCurrent 	= 0
	
	int peonSupply = 0
	int soldierSupply = 0
	int currentTier = 1
	
	int heroCount = 0
	unit hero1
	int heroRev1
	unit hero2
	int heroRev2
	unit hero3
	int heroRev3
	
	int boardId = -1
	
	player p
	
	string name
	int id
	Race currentRace
	
	construct(player p, Race r)
		this.p = p
		currentRace = r
		id = p.getId()
		print("test1")
		name = fromPlayer(p).toColorString() + p.getName() + "|r"
		print("test2 " + name)
		players[p.getId()] = this
		GroupEnumUnitsOfType(ENUM_GROUP, peon_names[currentRace castTo int], null)
		var count = 0
		for u in ENUM_GROUP
			if u.getOwner() == p
				count++
			ENUM_GROUP.removeUnit(u)
		print("COUNT : " + count.toString())
		peonSupply = count
		soldierSupply = p.getCurrentSupply()-peonSupply

	function update()
		let s = """
		gold = p.getGold()
		lumber = p.getLumber()
		supplyMax = p.getMaxSupply()
		supplyCurrent = p.getCurrentSupply()
		board.mb.getItem(startRow+1, startCol).setValue(gold.toString())
		board.mb.getItem(startRow+2, startCol).setValue(lumber.toString())
		if supplyMax > 100
			supplyMax = 100
		if supplyCurrent > 100
			supplyCurrent = 100
		if supplyCurrent < 51
			board.mb.getItem(startRow+3, startCol).setValue("|cff00F500" + supplyCurrent.toString() + "/" + supplyMax.toString() + "|r")
		else if supplyCurrent < 81
			board.mb.getItem(startRow+3, startCol).setValue("|cffFFFF00" + supplyCurrent.toString() + "/" + supplyMax.toString() + "|r")
		else
			board.mb.getItem(startRow+3, startCol).setValue("|cffFC0000" + supplyCurrent.toString() + "/" + supplyMax.toString() + "|r")
		board.mb.getItem(startRow+4, startCol).setValue(peonSupply.toString())
		board.mb.getItem(startRow+4, startCol+1).setValue(soldierSupply.toString())
		if heroRev1 > 0
			heroRev1--
		if heroRev2 > 0
			heroRev2--
		if heroRev3 > 0
			heroRev3--
		if heroCount > 0 
			let lvl = GetHeroLevel(hero1)
			let exp = GetHeroXP(hero1)
//			print("lvl" + lvl.toString() + ", exp: " + exp.toString() )
			int expp
			if lvl < 2
				expp = (exp/exp_levels[lvl]).cut()
			else if lvl == 10
				expp = 100
			else
				expp = ((exp - exp_levels[lvl-1] ) / (exp_levels[lvl] - exp_levels[lvl-1])).cut()
//			print("checked exp 1st hero: lvl" + lvl.toString() + ", exp: " + exp.toString() + ", expp: " + expp.toString() )
			var heroRevString = (heroRev1 div 60).toString() + ":" + (heroRev1 mod 60).toString()
			if heroRev1 > 0
				board.mb.getItem(startRow+1, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + " (" + heroRevString + ")|r")
			else if hero1.getHP() > .405
				board.mb.getItem(startRow+1, startCol+2).setValue("Level " + lvl.toString() + " |cff737373(" + (expp*100).toString() + "%)|r")
			else
				board.mb.getItem(startRow+1, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + " (" + (expp*100).toString() + "%)|r")
		if heroCount > 1 
			let lvl = GetHeroLevel(hero2)
			let exp = GetHeroXP(hero2)
			let expp = (exp/exp_levels[lvl]).cut()
			var heroRevString = (heroRev2 div 60).toString() + ":" + (heroRev2 mod 60).toString()
			if heroRev2 > 0
				board.mb.getItem(startRow+2, startCol+2).setValue("(|cffFFCC00" + heroRev2.toString() + "|r) " + "|cff3A3A3ALevel " + lvl.toString() + " (" + heroRevString + ")|r")
			else if hero2.getHP() > .405
				board.mb.getItem(startRow+2, startCol+2).setValue("Level " + lvl.toString() + " |cff737373(" + (expp*100).toString()  + "%)|r")
			else
				board.mb.getItem(startRow+2, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + " (" + (expp*100).toString()  + "%)|r")
		if heroCount > 2 
			let lvl = GetHeroLevel(hero3)
			let exp = GetHeroXP(hero3)
			let expp = (exp/exp_levels[lvl]).cut()
			var heroRevString = (heroRev3 div 60).toString() + ":" + (heroRev3 mod 60).toString()
			
			if heroRev3 > 0
				board.mb.getItem(startRow+3, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + "(" + heroRevString + ") |r")
			else if hero3.getHP() > .405
				board.mb.getItem(startRow+3, startCol+2).setValue("Level " + lvl.toString() + " |cff737373(" + (expp*100).toString()  + "%)|r")
			else
				board.mb.getItem(startRow+3, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + " (" + (expp*100).toString()  + "%) |r")
		
		
	function onDeath(unit u)
		let id = u.getTypeId()

		if id == peon_ids[currentRace castTo int]
			peonSupply--
		else
			soldierSupply -= GetFoodUsed(u.getTypeId())
		var i = 0
		var lvl = 0
		var exp = 0
		if u == hero1
			lvl = GetHeroLevel(hero1)
			exp = GetHeroXP(hero1)
			i = 1
		else if u == hero2
			lvl = GetHeroLevel(hero2)
			exp = GetHeroXP(hero2)
			i = 2
		else if u == hero3
			lvl = GetHeroLevel(hero3)
			exp = GetHeroXP(hero3)
			i = 3
		let expp = (exp/exp_levels[lvl]).cut()
		if i > 0
//			print("checked exp 1st hero: lvl" + lvl.toString() + ", exp: " + exp.toString() + ", expp: " + expp.toString() )
			board.mb.getItem(startRow+i, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + " (" + (expp*100).toString() + "%)|r")

	function onReviveStart(unit u)
		print("REVIVE START!")
		int lvl
		if u == hero1
			lvl = GetHeroLevel(hero1)
			heroRev1 = (55 * lvl * 0.65).toInt()
			print("hero1revtime: " + heroRev1.toString())
		else if u == hero2
			lvl = GetHeroLevel(hero2)
			heroRev2 = (55 * lvl * 0.65).toInt()			
		else if u == hero3
			lvl = GetHeroLevel(hero3)
			heroRev2 = (55 * lvl * 0.65).toInt()
			
			
	function onReviveCancel(unit u)
		print("REVIVE CANCEL!")
		if u == hero1
			heroRev1 = 0
		else if u == hero2
			heroRev2 = 0		
		else if u == hero3
			heroRev2 = 0
			
	function onRevive(unit u)
		print("REVIVE!")
		var i = 0
		var lvl = 0
		var exp = 0
		soldierSupply += GetFoodUsed(u.getTypeId())
		if u == hero1
			lvl = GetHeroLevel(hero1)
			exp = GetHeroXP(hero1)
			i = 1
		else if u == hero2
			lvl = GetHeroLevel(hero2)
			exp = GetHeroXP(hero2)
			i = 2			
		else if u == hero3
			lvl = GetHeroLevel(hero3)
			exp = GetHeroXP(hero3)
			i = 3
		let expp = (exp/exp_levels[lvl]).cut()
		if i > 0
//			print("checked exp 1st hero: lvl" + lvl.toString() + ", exp: " + exp.toString() + ", expp: " + expp.toString() )
			board.mb.getItem(startRow+i, startCol+2).setValue("Level " + lvl.toString() + " |cff737373(" + (expp*100).toString() + "%)|r")
			
	function onConstruct(unit u)
		if currentRace == Race.NIGHTELF
			let tpid = u.getTypeId()
			for i = 0 to ancient_count
				if tpid == ancient_ids[i]
					peonSupply--
					break
					
	function onUpgrade(unit u)
		let id = u.getTypeId()
		for i = 0 to 3
			if tier_ids[(currentRace castTo int)*3+i] == id
				currentTier ++
				board.mb.getItem(startRow+4, startCol+2)..setIcon(tier_icons[currentRace castTo int * 3 + i])..setValue("T " + currentTier.toString())
				break
				
	function onOrder(unit u)
		if u.getTypeId() == 'ugho' and u.getUserData() > 0
			let os = OrderId2String(GetIssuedOrderId())
			
			print(">>>>>removed")
			peonSupply-=2
			soldierSupply+= 2
			u.setUserData(0)
			
	function onPointOrder(unit u)
		if u.getTypeId() == 'ugho' and u.getUserData() > 0
			print(">>>>>removed")
			peonSupply-=2
			soldierSupply+= 2
			u.setUserData(0)
			
	function onTargetOrder(unit u)
		let tgt = GetOrderTargetDestructable()
		let os = OrderId2String(GetIssuedOrderId())
		if os != null and p == Player(0)
			print(os)
		if u.getTypeId() == 'ugho' and os != "resumeharvesting"
			print(os)
			if u.getUserData() < 1
				if tgt != null 
					print(">>>>>added")
					peonSupply+=2
					soldierSupply-=2
					u.setUserData(1)
		
	function onGhoulEnd(unit u)
		peonSupply-=2
		soldierSupply+= 2
		
	function onHeroBuy(unit u)
		print("BUYYYYYYYYY")
		let uid = u.getTypeId()
		for i = 0 to 23
			if uid == hero_ids[i]
				if heroCount == 0
					hero1 = u
					board.mb.getItem(startRow+1, startCol+2)..setStyle(true, true)..setValue("Level 1 |cff737373(0%)|r")..setIcon(hero_icons[i])
				else if heroCount < 2
					hero2 = u
					board.mb.getItem(startRow+2, startCol+2)..setStyle(true, true)..setValue("Level 1 |cff737373(0%)|r")..setIcon(hero_icons[i])
				else
					hero3 = u
					board.mb.getItem(startRow+3, startCol+2)..setStyle(true, true)..setValue("Level 1 |cff737373(0%)|r")..setIcon(hero_icons[i])
				heroCount++	
			
	function onTrain(unit u)
		print("unit trained onTrain(u)")
		let id = u.getTypeId()
		print("unit trained typeId: id: " + id.toString() + " p_id: " + peon_ids[currentRace castTo int].toString())
		if id == peon_ids[currentRace castTo int]
			peonSupply++
		else
			soldierSupply += GetFoodUsed(u.getTypeId())
			
			for i = 0 to 23
				if id == hero_ids[i]
					print("unit trained onTrain(u) match")
					if heroCount == 0
						print("unit trained onTrain(u) match first")
						hero1 = u
						board.mb.getItem(startRow+1, startCol+2)..setStyle(true, true)..setValue("Level 1 |cff737373(0%)|r")..setIcon(hero_icons[i])
						print("unit trained onTrain(u) match first done")
					else if heroCount < 2
						hero2 = u
						board.mb.getItem(startRow+2, startCol+2)..setStyle(true, true)..setValue("Level 1 |cff737373(0%)|r")..setIcon(hero_icons[i])
					else
						hero3 = u
						board.mb.getItem(startRow+3, startCol+2)..setStyle(true, true)..setValue("Level 1 |cff737373(0%)|r")..setIcon(hero_icons[i])
					heroCount++
		
	static function onDeathEvent()
		let fp = players[GetTriggerUnit().getOwner().getId()]
		if fp != null
			fp.onDeath(GetTriggerUnit())
			
	static function onUpgradeEvent()
		let fp = players[GetTriggerUnit().getOwner().getId()]
		if fp != null
			fp.onUpgrade(GetTriggerUnit())
			
	static function onConstructEvent()
		let fp = players[GetConstructedStructure().getOwner().getId()]
		if fp != null
			fp.onConstruct(GetConstructedStructure())
			
	static function onReviveEvent()
		let fp = players[GetRevivingUnit().getOwner().getId()]
		if fp != null
			fp.onRevive(GetRevivingUnit())
		
	static function onTrainEvent()
		print("unit trained")
		players[GetTrainedUnit().getOwner().getId()].onTrain(GetTrainedUnit())
		
	static function onReviveStartEvent()
		let fp = players[GetRevivingUnit().getOwner().getId()]
		if fp != null
			fp.onReviveStart(GetRevivingUnit())
			
	static function onReviveCancelEvent()
		let fp = players[GetRevivingUnit().getOwner().getId()]
		if fp != null
			fp.onReviveCancel(GetRevivingUnit())
		
	static function onOrderEvent()
		let fp = players[GetOrderedUnit().getOwner().getId()]
		if fp != null
			fp.onOrder(GetOrderedUnit())
				
	static function onTargetOrderEvent()
		let fp = players[GetOrderedUnit().getOwner().getId()]
		if fp != null
			fp.onTargetOrder(GetOrderedUnit())
		
	static function onPointOrderEvent()
		let fp = players[GetOrderedUnit().getOwner().getId()]
		if fp != null
			fp.onPointOrder(GetOrderedUnit())

	static function onSpellCancelEvent()
		print("SPELL EFFECT")
		let id = GetSpellAbilityId()
		if id == 'Ahrl'
			players[GetTriggerUnit().getOwner().getId()].onGhoulEnd(GetTriggerUnit())
			
	static function onSellEvent()
		print("UNIT SOLD")
		let u = GetSoldUnit()
		if u == null
			print("NULLLLLLLLLLLLLLLLLLLLLLLLL")
		let id = u.getTypeId()
		for i = 0 to 23
			if id == hero_ids[i]
				players[u.getOwner().getId()].onHeroBuy(u)
				break
			

function real.cut() returns int
	return this.toInt()

public function init_FSpecPlayer()
	print(">>INITTTTTTT")
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)..addAction(function FSpecPlayer.onDeathEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_TRAIN_FINISH)..addAction(function FSpecPlayer.onTrainEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)..addAction(function FSpecPlayer.onConstructEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH)..addAction(function FSpecPlayer.onUpgradeEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_HERO_REVIVE_FINISH)..addAction(function FSpecPlayer.onReviveEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_HERO_REVIVE_START)..addAction(function FSpecPlayer.onReviveStartEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_HERO_REVIVE_CANCEL)..addAction(function FSpecPlayer.onReviveCancelEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SELL)..addAction(function FSpecPlayer.onSellEvent)
	print("orders")
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)..addAction(function FSpecPlayer.onTargetOrderEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)..addAction(function FSpecPlayer.onPointOrderEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER)..addAction(function FSpecPlayer.onOrderEvent)
	
