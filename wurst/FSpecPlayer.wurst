package FSpecPlayer
import FSpecConfig
import Colors
import MapBounds
import initlater FSpecBoard
import LinkedList
import HashMap

FSpecPlayer array players

int typId = 0
player owner

function countPeonsOfPlayer(player p) returns int
	var count = 0
	GroupEnumUnitsOfPlayer(ENUM_GROUP, p, null)
	for u in ENUM_GROUP
		let id = u.getTypeId()
		for i = 0 to 3
			if id == peon_ids[i] and u.getHP() > .405
				count++
				break
		ENUM_GROUP.removeUnit(u)
	return count
	
public function testForHero(unit hero) returns boolean
	let pd = players[hero.getOwner().getId()]
	pd.p..addGold(750)..addLumber(500)
	
	for a in pd.altars
		if a.issueTargetOrderById(OrderId("revive"), hero)
			a.issueImmediateOrderById(851976)
			pd.p..addGold(-750)..addLumber(-500)
			return true
		else
			
	pd.p..addGold(-750)..addLumber(-500)
	return false
		
	

public class FSpecPlayer
	LinkedList<unit> altars = new LinkedList<unit>()
	FSpecBoard board
	int startRow
	int startCol
	int gold 			= 0
	int lumber 			= 0
	int supplyMax 		= 0
	int supplyCurrent 	= 0
	
	int extraPeonSupply = 0
	int peonSupply = 0
	int soldierSupply = 0
	int currentTier = 1
	int inTrainSupply = 0
	
	int heroCount = 0
	unit hero1
	int heroRev1
	unit hero2
	int heroRev2
	unit hero3
	int heroRev3
	
	int boardId = -1
	
	player p
	
	string name
	int id
	Race currentRace
	
	construct(player p, Race r)
		this.p = p
		currentRace = r
		id = p.getId()
		name = fromPlayer(p).toColorString() + p.getName() + "|r"
		players[p.getId()] = this
		peonSupply = countPeonsOfPlayer(p) + extraPeonSupply
		soldierSupply = p.getCurrentSupply()-peonSupply

	function update()
		gold = p.getGold()
		lumber = p.getLumber()
		supplyMax = p.getMaxSupply()
		supplyCurrent = p.getCurrentSupply()
		board.mb.getItem(startRow+1, startCol).setValue(gold.toString())
		board.mb.getItem(startRow+2, startCol).setValue(lumber.toString())
		if supplyMax > 100
			supplyMax = 100
		if supplyCurrent > 100
			supplyCurrent = 100
		if supplyCurrent < 51
			board.mb.getItem(startRow+3, startCol).setValue("|cff00F500" + supplyCurrent.toString() + "/" + supplyMax.toString() + "|r")
		else if supplyCurrent < 81
			board.mb.getItem(startRow+3, startCol).setValue("|cffFFFF00" + supplyCurrent.toString() + "/" + supplyMax.toString() + "|r")
		else
			board.mb.getItem(startRow+3, startCol).setValue("|cffFC0000" + supplyCurrent.toString() + "/" + supplyMax.toString() + "|r")
			
		
		
		if heroRev1 > 0
			heroRev1--
			if testForHero(hero1)
				onReviveCancel(hero1)
		if heroRev2 > 0
			heroRev2--
			if testForHero(hero2)
				onReviveCancel(hero2)
		if heroRev3 > 0
			heroRev3--
			if testForHero(hero3)
				onReviveCancel(hero3)
		if heroCount > 0 
			let lvl = GetHeroLevel(hero1)
			let exp = GetHeroXP(hero1)
			int expp
			if lvl < 2
				expp = (exp/exp_levels[lvl]*100).cut()
			else if lvl == 10
				expp = 100
			else
				expp = ((exp - exp_levels[lvl-1] ) / (exp_levels[lvl] - exp_levels[lvl-1]) *100).cut()
			var heroRevString = (heroRev1 div 60).toString() + ":" 
			let secs = (heroRev1 mod 60)
			if secs < 10
				heroRevString += "0" + secs.toString()
			else
				heroRevString += secs.toString()
				
			if heroRev1 > 0
				board.mb.getItem(startRow+1, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + " (" + heroRevString + ")|r")
			else if hero1.getHP() > .405
				board.mb.getItem(startRow+1, startCol+2).setValue("Level " + lvl.toString() + " |cff737373(" + (expp).toString() + "%)|r")
			else
				board.mb.getItem(startRow+1, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + " (" + (expp).toString() + "%)|r")
		if heroCount > 1 
			let lvl = GetHeroLevel(hero2)
			let exp = GetHeroXP(hero2)
			int expp
			if lvl < 2
				expp = (exp/exp_levels[lvl]*100).cut()
			else if lvl == 10
				expp = 100
			else
				expp = ((exp - exp_levels[lvl-1] ) / (exp_levels[lvl] - exp_levels[lvl-1]) *100).cut()
			var heroRevString = (heroRev2 div 60).toString() + ":" + (heroRev2 mod 60).toString()
			if heroRev2 > 0
				board.mb.getItem(startRow+2, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + " (" + heroRevString + ")|r")
			else if hero2.getHP() > .405
				board.mb.getItem(startRow+2, startCol+2).setValue("Level " + lvl.toString() + " |cff737373(" + (expp).toString()  + "%)|r")
			else
				board.mb.getItem(startRow+2, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + " (" + (expp).toString()  + "%)|r")
		if heroCount > 2 
			let lvl = GetHeroLevel(hero3)
			let exp = GetHeroXP(hero3)
			int expp
			if lvl < 2
				expp = (exp/exp_levels[lvl]*100).cut()
			else if lvl == 10
				expp = 100
			else
				expp = ((exp - exp_levels[lvl-1] ) / (exp_levels[lvl] - exp_levels[lvl-1]) *100).cut()
			var heroRevString = ""
			if (heroRev3 mod 60).toString().length() < 2
				heroRevString = (heroRev3 div 60).toString() + ":0" + (heroRev3 mod 60).toString()
			else
				heroRevString = (heroRev3 div 60).toString() + ":" + (heroRev3 mod 60).toString()
			
			if heroRev3 > 0
				board.mb.getItem(startRow+3, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + "(" + heroRevString + ") |r")
			else if hero3.getHP() > .405
				board.mb.getItem(startRow+3, startCol+2).setValue("Level " + lvl.toString() + " |cff737373(" + (expp).toString()  + "%)|r")
			else
				board.mb.getItem(startRow+3, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + " (" + (expp).toString()  + "%) |r")
				
		peonSupply = countPeonsOfPlayer(this.p) + extraPeonSupply
		soldierSupply = supplyCurrent - inTrainSupply - peonSupply
		if soldierSupply < 0
			soldierSupply = 0
		board.mb.getItem(startRow+4, startCol).setValue(peonSupply.toString())
		board.mb.getItem(startRow+4, startCol+1).setValue(soldierSupply.toString())
		
		
	function onDeath(unit u)
		var i = 0
		var lvl = 0
		var exp = 0
		if trainIdMap.get(u) > 0
			inTrainSupply -= GetFoodUsed(trainIdMap.get(u))
		if u == hero1
			lvl = GetHeroLevel(hero1)
			exp = GetHeroXP(hero1)
			i = 1
		else if u == hero2
			lvl = GetHeroLevel(hero2)
			exp = GetHeroXP(hero2)
			i = 2
		else if u == hero3
			lvl = GetHeroLevel(hero3)
			exp = GetHeroXP(hero3)
			i = 3
		let expp = (exp/exp_levels[lvl]*100).cut()
		if i > 0
			board.mb.getItem(startRow+i, startCol+2).setValue("|cff3A3A3ALevel " + lvl.toString() + " (" + (expp).toString() + "%)|r")

	function onReviveStart(unit u)
		int lvl
		inTrainSupply += GetFoodUsed(u.getTypeId())
		if u == hero1
			lvl = GetHeroLevel(hero1)
			heroRev1 = (55 * lvl * 0.65).toInt()
			if heroRev1 > 110
				heroRev1 = 110
		else if u == hero2
			lvl = GetHeroLevel(hero2)
			heroRev2 = (55 * lvl * 0.65).toInt()
			if heroRev2 > 110
				heroRev2 = 110
		else if u == hero3
			lvl = GetHeroLevel(hero3)
			heroRev3 = (55 * lvl * 0.65).toInt()
			if heroRev3 > 110
				heroRev3 = 110
			
			
	function onReviveCancel(unit u)
		inTrainSupply -= GetFoodUsed(u.getTypeId())
		if u == hero1
			heroRev1 = 0
		else if u == hero2
			heroRev2 = 0		
		else if u == hero3
			heroRev2 = 0
			
	function onRevive(unit u)
		inTrainSupply -= GetFoodUsed(u.getTypeId())
		var i = 0
		var lvl = 0
		var exp = 0
		if u == hero1
			lvl = GetHeroLevel(hero1)
			exp = GetHeroXP(hero1)
			heroRev1 = -1
			i = 1
		else if u == hero2
			lvl = GetHeroLevel(hero2)
			exp = GetHeroXP(hero2)
			heroRev2 = -1
			i = 2			
		else if u == hero3
			lvl = GetHeroLevel(hero3)
			exp = GetHeroXP(hero3)
			heroRev3 = -1
			i = 3
		let expp = (exp/exp_levels[lvl]*100).cut()
		if i > 0
			board.mb.getItem(startRow+i, startCol+2).setValue("Level " + lvl.toString() + " |cff737373(" + (expp).toString() + "%)|r")
			
			
	function onConstruct(unit u)
		trainCountMap.put(u, 0)
		trainIdMap.put(u, 0)
		let tpid = u.getTypeId()
		for i = 0 to 3
			if tpid == altar_ids[i]
				players[u.getOwner().getId()].altars.add(u)
				break
		for i = 0 to ancient_count
			if tpid == ancient_ids[i]
				extraPeonSupply++
				return
				
	function onConstructStart(unit u)
		let tpid = u.getTypeId()
		for i = 0 to ancient_count
			if tpid == ancient_ids[i]
				extraPeonSupply--
				return
				
	function onConstructCancel(unit u)
		let tpid = u.getTypeId()
		for i = 0 to ancient_count
			if tpid == ancient_ids[i]
				extraPeonSupply++
				return
					
	function onUpgrade(unit u)
		let id = u.getTypeId()
		for i = 0 to 3
			if tier_ids[(currentRace castTo int)*3+i] == id
				currentTier ++
				board.mb.getItem(startRow+4, startCol+2)..setIcon(tier_icons[currentRace castTo int * 3 + i])..setValue("T " + currentTier.toString())
				break
				
	function onOrder(unit u)
		let id = GetIssuedOrderId()
		let dum = createUnit(DUMMY_PLAYER, id, vec2(mapMinX, mapMinY), angle(0) ) 
		if dum != null
			dum.remove()
			trainCountMap.put(u, trainCountMap.get(u) + 1)
		if u.getTypeId() == 'ugho' and u.getUserData() > 0
			extraPeonSupply-=2
			u.setUserData(0)
		else if u.getTypeId() == 'ngir' and u.getUserData() > 0
			extraPeonSupply-=4
			u.setUserData(0)
			
			
	function onPointOrder(unit u)
		if u.getTypeId() == 'ugho' and u.getUserData() > 0
			extraPeonSupply-=2
			u.setUserData(0)
		else if u.getTypeId() == 'ngir' and u.getUserData() > 0
			extraPeonSupply-=4
			u.setUserData(0)
			
	function onTargetOrder(unit u)
		let tgt = GetOrderTargetDestructable()
		let os = OrderId2String(GetIssuedOrderId())
		if u.getTypeId() == 'ugho' and os != "resumeharvesting"
			if u.getUserData() < 1
				if tgt != null 
					extraPeonSupply+=2
					u.setUserData(1)
		else if u.getTypeId() == 'ngir' and os != "resumeharvesting"
			if u.getUserData() < 1
				if tgt != null 
					extraPeonSupply+=4
					u.setUserData(1)
		
		
	function onHeroBuy(unit u)
		let uid = u.getTypeId()
		for i = 0 to 23
			if uid == hero_ids[i]
				if heroCount == 0
					hero1 = u
					board.mb.getItem(startRow+1, startCol+2)..setStyle(true, true)..setValue("Level 1 |cff737373(0%)|r")..setIcon(hero_icons[i])
				else if heroCount < 2
					hero2 = u
					board.mb.getItem(startRow+2, startCol+2)..setStyle(true, true)..setValue("Level 1 |cff737373(0%)|r")..setIcon(hero_icons[i])
				else
					hero3 = u
					board.mb.getItem(startRow+3, startCol+2)..setStyle(true, true)..setValue("Level 1 |cff737373(0%)|r")..setIcon(hero_icons[i])
				heroCount++	
			
	boolean testCancel = false
	boolean wasFirst = false
	boolean trainStarted = false
	unit creator = null
	timer tim
	int fused = 0
	
	HashMap<unit, int> trainCountMap = new HashMap<unit, int>()
	HashMap<unit, int> trainIdMap = new HashMap<unit, int>()
	
	function onTrainStart(int uid)
		inTrainSupply += GetFoodUsed(uid)
		trainIdMap.put(GetTriggerUnit(), uid)
		if testCancel
			trainStarted = true
			testCancel = false
			if GetTriggerUnit() == creator
				wasFirst = true
			
		
	function onTrainCancel(int uid)
		let u = GetTriggerUnit()
		trainCountMap.put(u, trainCountMap.get(u) - 1)
		if trainCountMap.get(u) > 0
			testCancel = true
			creator = u
			fused = GetFoodUsed(uid)
			tim = getTimer()
			tim..start(0.001, function endTest)..setData(this castTo int)
		else
			inTrainSupply -= GetFoodUsed(uid)
			trainIdMap.put(u, 0)
			

		
	function onTrain(unit u)
		let id = u.getTypeId()
		let c = GetTriggerUnit()
		trainCountMap.put(c, trainCountMap.get(c) - 1)
		trainIdMap.put(c, id)
		inTrainSupply -= GetFoodUsed(u.getTypeId())		
		for i = 0 to 23
			if id == hero_ids[i]
				if heroCount == 0
					hero1 = u
					board.mb.getItem(startRow+1, startCol+2)..setStyle(true, true)..setValue("Level 1 |cff737373(0%)|r")..setIcon(hero_icons[i])
				else if heroCount < 2
					hero2 = u
					board.mb.getItem(startRow+2, startCol+2)..setStyle(true, true)..setValue("Level 1 |cff737373(0%)|r")..setIcon(hero_icons[i])
				else
					hero3 = u
					board.mb.getItem(startRow+3, startCol+2)..setStyle(true, true)..setValue("Level 1 |cff737373(0%)|r")..setIcon(hero_icons[i])
				heroCount++
		
	static function onDeathEvent()
		let fp = players[GetTriggerUnit().getOwner().getId()]
		if fp != null
			fp.onDeath(GetTriggerUnit())
			
	static function onUpgradeEvent()
		let fp = players[GetTriggerUnit().getOwner().getId()]
		if fp != null
			fp.onUpgrade(GetTriggerUnit())
			
	static function onConstructEvent()
		let fp = players[GetConstructedStructure().getOwner().getId()]
		if fp != null
			fp.onConstruct(GetConstructedStructure())
			
	static function onConstructStartEvent()
		let fp = players[GetConstructingStructure().getOwner().getId()]
		if fp != null
			fp.onConstructStart(GetConstructingStructure())
			
	static function onConstructCancelEvent()
		let fp = players[GetCancelledStructure().getOwner().getId()]
		if fp != null
			fp.onConstructCancel(GetCancelledStructure())
			
	static function onReviveEvent()
		let fp = players[GetRevivingUnit().getOwner().getId()]
		if fp != null
			fp.onRevive(GetRevivingUnit())
		
	static function onTrainEventFinish()
		players[GetTrainedUnit().getOwner().getId()].onTrain(GetTrainedUnit())
		
	static function onTrainEventStart()
		players[GetTriggerUnit().getOwner().getId()].onTrainStart(GetTrainedUnitType())
	
	static function onTrainEventCancel()
		players[GetTriggerUnit().getOwner().getId()].onTrainCancel(GetTrainedUnitType())
		
	static function onReviveStartEvent()
		let fp = players[GetRevivingUnit().getOwner().getId()]
		if fp != null
			fp.onReviveStart(GetRevivingUnit())
			
	static function onReviveCancelEvent()
		let fp = players[GetRevivingUnit().getOwner().getId()]
		if fp != null
			fp.onReviveCancel(GetRevivingUnit())
		
	static function onOrderEvent()
		if GetOrderedUnit().getOwner() == Player(0)
		let fp = players[GetOrderedUnit().getOwner().getId()]
		if fp != null
			fp.onOrder(GetOrderedUnit())
				
	static function onTargetOrderEvent()
		let fp = players[GetOrderedUnit().getOwner().getId()]
		if fp != null
			fp.onTargetOrder(GetOrderedUnit())
		
	static function onPointOrderEvent()
		let fp = players[GetOrderedUnit().getOwner().getId()]
		if fp != null
			fp.onPointOrder(GetOrderedUnit())

			
	static function onSellEvent()
		let u = GetSoldUnit()
		if u == null
		let id = u.getTypeId()
		for i = 0 to 23
			if id == hero_ids[i]
				players[u.getOwner().getId()].onHeroBuy(u)
				break
			
function endTest()
	let t = GetExpiredTimer()
	let fs = t.getData() castTo FSpecPlayer
	fs.testCancel = false
	if fs.trainStarted
		fs.trainStarted = false
		if fs.wasFirst
			fs.inTrainSupply-=fs.fused
			fs.wasFirst = false
	t.release()

function real.cut() returns int
	return this.toInt()

public function init_FSpecPlayer()
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)..addAction(function FSpecPlayer.onDeathEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_TRAIN_FINISH)..addAction(function FSpecPlayer.onTrainEventFinish)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_TRAIN_START)..addAction(function FSpecPlayer.onTrainEventStart)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_TRAIN_CANCEL)..addAction(function FSpecPlayer.onTrainEventCancel)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)..addAction(function FSpecPlayer.onConstructEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_START)..addAction(function FSpecPlayer.onConstructStartEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL)..addAction(function FSpecPlayer.onConstructCancelEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH)..addAction(function FSpecPlayer.onUpgradeEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_HERO_REVIVE_FINISH)..addAction(function FSpecPlayer.onReviveEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_HERO_REVIVE_START)..addAction(function FSpecPlayer.onReviveStartEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_HERO_REVIVE_CANCEL)..addAction(function FSpecPlayer.onReviveCancelEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SELL)..addAction(function FSpecPlayer.onSellEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)..addAction(function FSpecPlayer.onTargetOrderEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)..addAction(function FSpecPlayer.onPointOrderEvent)
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER)..addAction(function FSpecPlayer.onOrderEvent)
	
